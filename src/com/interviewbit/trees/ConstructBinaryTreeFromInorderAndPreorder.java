package com.interviewbit.trees;

import java.util.ArrayList;
import java.util.Arrays;

public class ConstructBinaryTreeFromInorderAndPreorder {

	public static void main(String[] args) {
		ArrayList<Integer> preorder = new ArrayList<>(Arrays.asList(new Integer[] { 259, 386, 680, 418, 456, 751, 697,
				707, 220, 357, 113, 412, 841, 657, 391, 170, 79, 836, 738, 368, 633, 151, 228, 840, 471, 274, 533, 692,
				330, 507, 517, 530, 361, 232, 790, 164, 237, 267, 491, 328, 672, 647, 249, 853, 18, 596, 783, 202, 229,
				306, 277, 346, 242, 798, 741, 665, 157, 760, 749, 604, 375, 196, 475, 224, 13, 688, 746, 329, 805, 286,
				599, 660, 737, 731, 536, 854, 439, 756, 69, 318, 185, 817, 60, 651, 569, 273, 279, 438, 271, 270, 338,
				201, 128, 212, 881, 852, 199, 419, 363, 822, 314, 288, 215, 401, 388, 137, 839, 5, 350, 844, 407, 825,
				108, 508, 230, 879, 131, 863, 534, 100, 708, 719, 590, 168, 367, 483, 775, 728, 463, 488, 772, 579,
				352, 689, 16, 372, 144, 768, 49, 801, 27, 666, 327, 469, 349, 194, 97, 757, 659, 834, 434, 644, 610,
				821, 750, 576, 38, 8, 331, 289, 90, 252, 861, 855, 526, 711, 209, 63, 493, 699, 826, 159, 787, 184,
				458, 399, 172, 497, 182, 246, 139, 14, 563, 705, 52, 743, 25, 2, 140, 712, 94, 180, 436, 724, 767, 221,
				95, 571, 421, 485, 771, 607, 169, 735, 359, 631, 555, 758, 377, 641, 17, 124, 706, 348, 744, 634, 864,
				23, 856, 850, 234, 818, 600, 6, 432, 625, 31, 335, 235, 59, 857, 556, 7, 356, 15, 761, 451, 70, 797,
				276, 253, 778, 616, 394, 763, 111, 554, 132, 664, 117, 118, 701, 162, 91, 481, 704, 102, 290, 293, 373,
				679, 649, 371, 178, 285, 715, 562, 759, 655, 218, 595, 422, 428, 351, 880, 423, 115, 621, 677, 752,
				807, 133, 244, 362, 645, 545, 101, 619, 484, 700, 847, 574, 874, 42, 400, 518, 216, 543, 773, 559, 753,
				745, 747, 785, 612, 586, 410, 299, 875, 315, 573, 210, 281, 806, 652, 871, 608, 494, 754, 295, 116,
				278, 674, 310, 280, 382, 551, 92, 301, 478, 294, 358, 24, 67, 582, 583, 36, 105, 866, 53, 147, 297,
				791, 537, 320, 47, 166, 264, 402, 321, 570, 383, 122, 325, 343, 455, 614, 509, 156, 268, 174, 762, 437,
				119, 110, 859, 658, 46, 780, 860, 440, 468, 426, 643, 240, 165, 572, 653, 732, 506, 62, 500, 106, 464,
				492, 819, 803, 544, 378, 339, 511, 532, 322, 435, 702, 548, 796, 20, 823, 265, 848, 308, 84, 504, 542,
				226, 809, 648, 722, 804, 32, 552, 326, 98, 487, 495, 626, 477, 58, 788, 77, 829, 203, 867, 9, 155, 833,
				1, 225, 219, 459, 820, 709, 179, 846, 729, 153, 862, 272, 520, 406, 622, 408, 799, 449, 815, 40, 650,
				258, 524, 393, 365, 68, 312, 35, 703, 726, 192, 628, 858, 443, 197, 476, 143, 462, 808, 667, 515, 498,
				466, 30, 535, 136, 461, 88, 698, 78, 585, 48, 592, 448, 813, 470, 145, 411, 248, 195, 255, 243, 134,
				609, 540, 223, 557, 663, 516, 718, 876, 725, 405, 685, 786, 409, 588, 549, 611, 496, 602, 465, 878,
				580, 474, 793, 207, 513, 603, 627, 755, 183, 784, 125, 450, 298, 142, 300, 121, 206, 453, 525, 733, 85,
				593, 597, 429, 489, 10, 832, 473, 601, 3, 581, 800, 472, 521, 519, 238, 177, 130, 795, 344, 693, 682,
				739, 445, 646, 188, 233, 332, 83, 387, 420, 433, 529, 396, 29, 769, 730, 678, 713, 4, 160, 282, 379,
				490, 275, 538, 193, 370, 789, 112, 547, 307, 103, 138, 251, 480, 613, 851, 835, 76, 642, 446, 260, 872,
				374, 334, 316, 64, 594, 347, 381, 186, 403, 632, 340, 397, 353, 539, 695, 389, 395, 598, 828, 231, 21,
				560, 200, 720, 687, 447, 690, 385, 57, 369, 398, 637, 305, 824, 123, 37, 776, 620, 217, 256, 26, 514,
				337, 154, 28, 721, 781, 45, 141, 766, 51, 319, 527, 639, 774, 694, 71, 342, 303, 550, 254, 149, 681,
				283, 44, 56, 565, 442, 336, 811, 109, 222, 296, 629, 710, 503, 261, 73, 104, 617, 324, 191, 877, 736,
				802, 175, 792, 460, 675, 114, 577, 546, 171, 816, 578, 566, 615, 810, 591, 714, 605, 623, 257, 684,
				366, 50, 630, 865, 430, 427, 284, 686, 415, 173, 673, 782, 431, 380, 541, 176, 81, 302, 838, 568, 479,
				727, 845, 80, 187, 662, 22, 656, 291, 107, 636, 65, 19, 501, 355, 765, 75, 528, 41, 837, 345, 82, 589,
				376, 873, 777, 190, 424, 830, 93, 414, 635, 148, 624, 262, 723, 794, 127, 482, 354, 292, 150, 742, 245,
				618, 691, 211, 587, 486, 313, 740, 317, 457, 696, 676, 74, 870, 227, 304, 868, 204, 404, 661, 33, 779,
				66, 263, 208, 333, 553, 444, 425, 502, 638, 241, 512, 311, 812, 341, 831, 869, 269, 198, 734, 181, 668,
				360, 454, 671, 152, 266, 531, 764, 413, 510, 39, 390, 467, 213, 748, 61, 561, 558, 654, 364, 717, 126,
				441, 250, 564, 523, 86, 12, 214, 770, 505, 606, 54, 683, 34, 814, 584, 129, 392, 669, 205, 309, 96,
				239, 849, 843, 167, 417, 567, 247, 827, 842, 135, 87, 161, 499, 575, 158, 384, 323, 716, 89, 640, 452,
				522, 189, 670, 163, 11, 236, 146, 416, 120, 72, 287, 99, 43, 55 }));
		ArrayList<Integer> inorder = new ArrayList<>(Arrays.asList(new Integer[] { 697, 707, 220, 751, 357, 456, 391,
				170, 657, 841, 79, 412, 836, 113, 368, 738, 418, 633, 680, 692, 533, 274, 517, 507, 232, 790, 361, 530,
				330, 164, 471, 491, 267, 647, 853, 249, 18, 672, 328, 596, 237, 783, 840, 306, 229, 741, 798, 665, 242,
				157, 749, 760, 346, 604, 196, 375, 475, 224, 277, 746, 688, 13, 660, 599, 737, 286, 536, 731, 854, 805,
				69, 756, 318, 439, 651, 60, 817, 569, 185, 329, 273, 270, 338, 271, 128, 201, 438, 212, 881, 279, 202,
				363, 288, 215, 314, 401, 822, 388, 839, 137, 419, 407, 844, 108, 825, 230, 508, 350, 5, 879, 199, 100,
				534, 863, 131, 708, 719, 590, 168, 852, 463, 728, 775, 488, 483, 367, 228, 16, 689, 352, 579, 144, 801,
				27, 49, 666, 768, 349, 469, 327, 97, 194, 372, 757, 434, 834, 659, 772, 750, 821, 331, 8, 38, 576, 610,
				861, 252, 711, 209, 493, 63, 526, 855, 90, 699, 787, 159, 826, 184, 289, 497, 182, 172, 246, 399, 139,
				458, 563, 52, 705, 743, 14, 2, 25, 712, 140, 94, 644, 436, 724, 180, 151, 767, 485, 421, 571, 95, 169,
				607, 359, 735, 771, 555, 758, 631, 221, 124, 17, 744, 634, 348, 706, 641, 856, 23, 864, 850, 377, 6,
				600, 818, 234, 31, 235, 59, 335, 857, 625, 451, 797, 70, 761, 276, 15, 616, 778, 253, 394, 356, 763,
				111, 7, 132, 554, 117, 664, 118, 556, 701, 162, 432, 373, 679, 649, 293, 290, 102, 704, 178, 371, 481,
				285, 91, 218, 655, 422, 595, 428, 759, 351, 562, 880, 715, 752, 807, 677, 133, 621, 115, 423, 244, 386,
				101, 619, 545, 874, 574, 400, 518, 42, 216, 543, 847, 747, 785, 745, 586, 410, 299, 612, 315, 875, 573,
				806, 281, 210, 753, 652, 871, 608, 559, 116, 295, 674, 278, 754, 310, 280, 494, 551, 382, 773, 478,
				294, 301, 92, 67, 24, 582, 583, 105, 36, 358, 866, 700, 297, 791, 147, 537, 320, 53, 47, 166, 402, 264,
				484, 455, 614, 509, 343, 156, 325, 268, 122, 174, 383, 110, 119, 46, 780, 860, 468, 440, 658, 859, 437,
				426, 240, 643, 762, 572, 165, 570, 506, 732, 62, 106, 500, 464, 653, 803, 819, 492, 339, 378, 544, 511,
				321, 435, 20, 823, 848, 265, 796, 308, 548, 542, 504, 226, 84, 648, 809, 722, 702, 32, 804, 552, 322,
				326, 495, 487, 626, 98, 532, 788, 829, 77, 58, 155, 9, 867, 1, 833, 203, 225, 477, 179, 709, 820, 729,
				846, 459, 153, 219, 272, 862, 645, 408, 622, 799, 406, 449, 650, 258, 40, 524, 68, 365, 393, 35, 312,
				703, 815, 520, 443, 858, 197, 628, 476, 192, 726, 498, 515, 667, 808, 535, 30, 466, 136, 698, 88, 461,
				462, 78, 585, 48, 143, 813, 448, 411, 248, 145, 195, 243, 255, 609, 134, 470, 663, 557, 516, 223, 718,
				876, 540, 592, 725, 405, 362, 580, 878, 465, 474, 602, 207, 793, 496, 611, 603, 513, 755, 183, 450,
				125, 784, 298, 142, 627, 549, 453, 525, 206, 121, 733, 85, 300, 593, 588, 489, 429, 473, 832, 601, 10,
				472, 800, 581, 521, 3, 238, 519, 795, 130, 344, 177, 597, 646, 445, 739, 682, 188, 693, 409, 332, 83,
				233, 387, 786, 433, 529, 420, 396, 685, 29, 769, 259, 275, 370, 193, 538, 789, 490, 103, 307, 547, 112,
				138, 379, 480, 613, 251, 282, 835, 642, 76, 851, 160, 872, 260, 374, 316, 334, 446, 64, 4, 403, 397,
				340, 353, 632, 539, 186, 695, 395, 389, 560, 200, 21, 231, 447, 687, 720, 57, 385, 369, 690, 637, 398,
				305, 828, 824, 598, 37, 123, 381, 776, 620, 217, 256, 347, 28, 154, 781, 721, 337, 45, 141, 514, 766,
				51, 26, 527, 639, 319, 71, 694, 774, 594, 303, 342, 713, 681, 283, 56, 44, 149, 254, 442, 222, 109,
				811, 629, 296, 503, 710, 336, 104, 73, 324, 617, 191, 261, 736, 802, 877, 565, 460, 792, 175, 675, 550,
				546, 816, 171, 810, 615, 591, 566, 578, 577, 714, 623, 257, 605, 114, 678, 366, 284, 686, 427, 173,
				673, 415, 782, 430, 541, 380, 431, 865, 302, 81, 838, 176, 727, 479, 568, 187, 80, 845, 22, 662, 630,
				656, 636, 65, 107, 19, 355, 501, 765, 291, 75, 50, 528, 837, 41, 345, 684, 589, 93, 830, 424, 414, 190,
				777, 148, 635, 873, 376, 723, 262, 794, 482, 127, 624, 292, 354, 82, 691, 618, 245, 742, 486, 313, 740,
				587, 317, 211, 150, 457, 730, 74, 227, 870, 676, 404, 204, 868, 779, 33, 66, 661, 208, 263, 333, 444,
				425, 553, 304, 638, 241, 502, 696, 812, 311, 869, 831, 269, 734, 198, 341, 512, 360, 668, 454, 181,
				413, 764, 510, 531, 390, 467, 39, 213, 266, 61, 748, 152, 561, 671, 250, 441, 523, 564, 86, 126, 12,
				214, 717, 770, 505, 606, 364, 814, 584, 34, 129, 683, 669, 392, 54, 849, 239, 96, 309, 843, 205, 167,
				654, 827, 247, 842, 567, 135, 575, 499, 161, 87, 417, 716, 640, 89, 452, 323, 189, 522, 384, 670, 163,
				158, 11, 120, 72, 416, 287, 146, 99, 236, 558, 43, 55 }));
		TreeNode node = buildTree1(preorder, inorder);
		System.out.println();
	}

	static public TreeNode buildTree(ArrayList<Integer> preorder, ArrayList<Integer> inorder) {
		int preStart = 0;
		int preEnd = preorder.size() - 1;
		int inStart = 0;
		int inEnd = inorder.size() - 1;

		return construct(preorder, preStart, preEnd, inorder, inStart, inEnd);
	}

	static public TreeNode construct(ArrayList<Integer> preorder, int preStart, int preEnd, ArrayList<Integer> inorder,
			int inStart, int inEnd) {
		if (preStart > preEnd || inStart > inEnd) {
			return null;
		}

		int val = preorder.get(preStart);
		TreeNode p = new TreeNode(val);

		// find parent element index from inorder
		int k = 0;
		for (int i = 0; i < inorder.size(); i++) {
			if (val == inorder.get(i)) {
				k = i;
				break;
			}
		}

		p.left = construct(preorder, preStart + 1, preStart + (k - inStart), inorder, inStart, k - 1);
		p.right = construct(preorder, preStart + (k - inStart) + 1, preEnd, inorder, k + 1, inEnd);

		return p;
	}

	static public TreeNode buildTree1(ArrayList<Integer> preorder, ArrayList<Integer> inorder) {
		if (inorder.size() == 0 || preorder.size() == 0 || inorder.size() != preorder.size())
			return null;
		return buildTreeRe1(preorder, 0, inorder, 0, preorder.size());
	}

	static public TreeNode buildTreeRe1(ArrayList<Integer> preorder, int s1, ArrayList<Integer> inorder, int s2,
			int size) {
		if (size <= 0 || s1 >= preorder.size())
			return null;
		if (s1 == 658)
			System.out.println("yo");
		TreeNode node = new TreeNode(preorder.get(s1));
		if (size == 1)
			return node;
		int pos = s2;
		while (pos <= (s2 + size - 1)) {
			if (inorder.get(pos) == preorder.get(s1))
				break;
			++pos;
		}
		int leftlen = pos - s2;
		node.left = buildTreeRe1(preorder, s1 + 1, inorder, s2, leftlen);
		node.right = buildTreeRe1(preorder, s1 + leftlen + 1, inorder, pos + 1, size - leftlen - 1);
		return node;
	}

	ArrayList<Integer> preorder, inorder;

	public TreeNode buildTree3(ArrayList<Integer> preorder, ArrayList<Integer> inorder) {

		if (preorder == null || inorder == null || preorder.size() == 0 || inorder.size() == 0)
			return null;

		if (preorder.size() != inorder.size())
			return null;

		this.preorder = preorder;
		this.inorder = inorder;

		return rec(0, preorder.size() - 1, 0);

	}

	private TreeNode rec(int start, int end, int index) {

		if (start > end)
			return null;

		TreeNode root = new TreeNode(preorder.get(index));

		int i = start;

		for (; i <= end; i++) {
			if (inorder.get(i).intValue() == root.val)
				break;
		}

		root.left = rec(start, i - 1, index + 1);
		root.right = rec(i + 1, end, index + i - start + 1);

		return root;
	}
}
